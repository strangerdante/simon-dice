<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
    <style>
      .neon {
        box-shadow:
          0 0 7px #fff,
          0 0 10px #fff,
          0 0 21px #fff;
      }
    </style>
  </head>

  <body
    class="flex flex-col items-center justify-center min-h-screen bg-gray-700"
  >
    <p id="maxLevelDisplay" class="text-white pb-4">
      Nivel máximo alcanzado: 0
    </p>
    <div class="grid grid-cols-2 grid-rows-2 w-64 h-64 relative">
      <div id="red" class="bg-red-500 rounded-ss-full mr-1 mb-1"></div>
      <div id="blue" class="bg-blue-500 rounded-se-full mb-1"></div>
      <div id="green" class="bg-green-500 rounded-es-full mr-1"></div>
      <div id="yellow" class="bg-yellow-500 rounded-ee-full"></div>
      <!-- Círculo en el centro -->
      <button
        id="startButton"
        class="absolute top-1/2 left-1/2 w-32 h-32 bg-gray-700 rounded-full transform -translate-x-1/2 -translate-y-1/2 text-center font-bold text-white"
      >
        COMENZAR
      </button>
    </div>
    <script is:inline>
      // Referencias elementos del DOM
      const red = document.getElementById("red");
      const blue = document.getElementById("blue");
      const green = document.getElementById("green");
      const yellow = document.getElementById("yellow");
      const startButton = document.getElementById("startButton");
      const maxLevelDisplay = document.getElementById("maxLevelDisplay");

      // Variables para el estado del juego
      let sequence = [];
      let playerSequence = [];
      let level = 0;
      let maxLevel = localStorage.getItem("maxLevel") || 0;

      // Mostrar el nivel máximo alcanzado almacenado en localStorage
      maxLevelDisplay.textContent = `Nivel máximo alcanzado: ${maxLevel}`;

      // Definir los colores y sonidos
      const colors = ["red", "blue", "green", "yellow"];
      const sounds = {
        red: new Audio("/sounds/1.mp3"),
        blue: new Audio("/sounds/2.mp3"),
        green: new Audio("/sounds/3.mp3"),
        yellow: new Audio("/sounds/4.mp3"),
        error: new Audio("/sounds/error.wav"),
      };

      // Función para iniciar el juego
      function startGame() {
        level = 0;
        sequence = [];
        playerSequence = [];
        nextLevel();
        // Restablecer los colores originales
        const colors = [red, blue, green, yellow];
        colors.forEach((color) => color.classList.remove("bg-red-500"));
        red.classList.add("bg-red-500");
        blue.classList.add("bg-blue-500");
        green.classList.add("bg-green-500");
        yellow.classList.add("bg-yellow-500");
      }

      // Función para avanzar al siguiente nivel
      function nextLevel() {
        level++;
        playerSequence = [];
        startButton.textContent = `Nivel ${level}`;
        startButton.style.color = "white";
        const nextColor = colors[Math.floor(Math.random() * 4)];
        sequence.push(nextColor);
        playSequence();
      }

      // Función para reproducir la secuencia de colores
      function playSequence() {
        let delay = 0;
        sequence.forEach((color, index) => {
          setTimeout(() => {
            flashColor(color);
            playSound(color);
          }, delay);
          delay += 800;
        });
      }

      // Función para resaltar un color temporalmente
      function flashColor(color) {
        const element = document.getElementById(color);
        element.classList.add("neon", "opacity-50");
        setTimeout(() => {
          element.classList.remove("neon", "opacity-50");
        }, 400);
      }

      // Función para reproducir el sonido de cada color
      function playSound(color) {
        sounds[color].currentTime = 0;
        sounds[color].play();
      }

      // Función para manejar la entrada del jugador
      function handlePlayerInput(color) {
        playerSequence.push(color);
        flashColor(color);
        playSound(color);

        // Verificar si la secuencia ingresada es correcta
        if (
          playerSequence[playerSequence.length - 1] !==
          sequence[playerSequence.length - 1]
        ) {
          gameOver();
          return;
        }

        // Si el jugador completa la secuencia correctamente
        if (playerSequence.length === sequence.length) {
          if (level > maxLevel) {
            maxLevel = level;
            localStorage.setItem("maxLevel", maxLevel);
            maxLevelDisplay.textContent = `Nivel máximo alcanzado: ${maxLevel}`;
          }
          setTimeout(nextLevel, 1000);
        }
      }

      // Función para manejar el fin del juego
      function gameOver() {
        sounds.error.currentTime = 0;
        sounds.error.play(); // Sonido de error
        startButton.textContent = "GAME OVER";
        startButton.style.color = "red";
        sequence = [];
        playerSequence = [];
        level = 0;
        // Cambiar todos los colores a rojo
        [red, blue, green, yellow].forEach((element) => {
          element.classList.remove(
            "bg-blue-500",
            "bg-green-500",
            "bg-yellow-500"
          );
          element.classList.add("bg-red-500");
        });
      }

      //Eventos de clic botones de colores
      startButton.addEventListener("click", startGame);
      colors.forEach((color) => {
        document
          .getElementById(color)
          .addEventListener("click", () => handlePlayerInput(color));
      });
    </script>
  </body>
</html>
